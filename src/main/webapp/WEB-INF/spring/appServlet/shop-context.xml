<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:websocket="http://www.springframework.org/schema/websocket"
	
	xsi:schemaLocation="
		http://www.springframework.org/schema/websocket https://www.springframework.org/schema/websocket/spring-websocket.xsd
		http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<context:component-scan base-package="team1.project.bookshop.shop.controller" />

	<!-- 회원의 로그인 체크를 위한 advice 빈 설정 -->
	<beans:bean class="team1.project.bookshop.aop.MemberLoginCheckAdvice" id="memberLoginCheckAdvice"></beans:bean>
	
	<!-- 이상인 시작 -->
	
	<!-- 회원 로그인 체크 AOP 설정 -->
	<aop:config>
		<aop:aspect ref="memberLoginCheckAdvice">
			<aop:pointcut expression="execution(public * team1.project.bookshop.shop.controller..*(..))" id="memberLoginCheckPointcut"/>
			<aop:around method="sessionCheck" pointcut-ref="memberLoginCheckPointcut"/>
		</aop:aspect>
	</aop:config>
	
	<!-- 회원 관련 rest 예외 빈 등록 -->
	<beans:bean 
	class="team1.project.bookshop.aop.RestMemberGlobalException"
	id="restMemberGlobalException"/>
	
	<!-- 회원 관련 예외 빈 등록 -->
	<beans:bean 
	class="team1.project.bookshop.aop.MemberGlobalException" 
	id="memberGlobalException"/>
	
	<!-- 새 비밀번호 동일 여부 확인하는 클래스 bean 등록 -->
	<beans:bean 
	class="team1.project.bookshop.util.NewPassChecker"
	id="newPassChecker"/>

	<!-- 바인딩 에러를 처리하는 클래스 bean 등록 -->
	<beans:bean
	class="team1.project.bookshop.util.ErrorBinder"
	id="errorBinder"
	></beans:bean>
	
	<!-- 구글 로그인 관련 정보 등록 -->
 	<beans:bean id="googleLogin" class="team1.project.bookshop.sns.GoogleLogin">
 		<!-- 1)인증화면 관련 URL -->
 		<!-- 인증화면 링크 URL -->
 		<beans:property name="endpoint" value="https://accounts.google.com/o/oauth2/v2/auth"></beans:property>
 	 	<!-- google cloud platform에서 발급받은 client ID -->
 		<beans:property name="client_id" value=""/>
 		<!-- google cloud platform에서 발급받은 client Secret -->
 		<beans:property name="client_secret" value=""/>
 		<!-- Resource Owner 가 인증할 때, 콜백받을 우리 웹사이트 URI -->
 		<beans:property name="redirect_uri" value="http://localhost:7777/member/sns/google/callback"/>
 		<!-- 콜백받을 때, 구글이 우리에게 전달할 파라미터의 이름 -->
 		<beans:property name="response_type" value="code"></beans:property>
 		<!-- Resource Owner 로부터 어떠한 정보를 수집할지 그 범위 설정 -->
 		<beans:property name="scope" value="https://www.googleapis.com/auth/userinfo.email https://www.googleapis.com/auth/userinfo.profile"/>
 		<!-- 2) 토큰을 위한 변수 -->
 		<beans:property name="token_request_url" value="https://oauth2.googleapis.com/token"/>
		<!-- 모든 SNS 사업자가 같은 변수명을 쓴다 -->
 		<beans:property name="grant_type" value="authorization_code"></beans:property>
 		<!-- 3) 회원정보 요청을 위한 url -->
 		<beans:property name="userinfo_url" value="https://www.googleapis.com/oauth2/v1/userinfo"></beans:property>
 	</beans:bean>
 	
 	<!-- 카카오 로그인 관련 정보 등록 -->
 	<beans:bean id="kakaoLogin" class="team1.project.bookshop.sns.KakaoLogin">
 		<!-- 1)인증화면 관련 URL -->
 		<!-- 인증화면 링크 URL -->
 		<beans:property name="endpoint" value="https://kauth.kakao.com/oauth/authorize"></beans:property>
 	 	<!-- kakao developers에서 발급받은 Rest Api ID -->
 		<beans:property name="client_id" value=""/>
 		<!-- Resource Owner 가 인증할 때, 콜백받을 우리 웹사이트 URI -->
 		<beans:property name="redirect_uri" value="http://localhost:7777/member/sns/kakao/callback"/>
 		<!-- 콜백받을 때, 카카오가 우리에게 전달할 파라미터의 이름 -->
 		<beans:property name="response_type" value="code"></beans:property>
 		<!-- 2) 토큰을 위한 변수 -->
 		<beans:property name="token_request_url" value="https://kauth.kakao.com/oauth/token"/>
		<!-- 모든 SNS 사업자가 같은 변수명을 쓴다 -->
 		<beans:property name="grant_type" value="authorization_code"/>
 		<!-- 3) 회원정보 요청을 위한 url -->
 		<beans:property name="userinfo_url" value="https://kapi.kakao.com/v2/user/me"/>
 	</beans:bean>
 	
 	<!-- 네이버 로그인 관련 정보 등록 -->
 	<beans:bean id="naverLogin" class="team1.project.bookshop.sns.NaverLogin">
 		<!-- 1)인증화면 관련 URL -->
 		<!-- 인증화면 링크 URL -->
 		<beans:property name="endpoint" value="https://nid.naver.com/oauth2.0/authorize"></beans:property>
	 	<!-- naver developers에서 발급받은 Rest Api ID -->
 		<beans:property name="client_id" value=""/>
	 	<!-- naver developers에서 발급받은 client_secret -->
 		<beans:property name="client_secret" value=""/>
 		<!-- Resource Owner 가 인증할 때, 콜백받을 우리 웹사이트 URI -->
 		<beans:property name="redirect_uri" value="http://localhost:7777/member/sns/naver/callback"/>
 		<!-- 콜백받을 때, 카카오가 우리에게 전달할 파라미터의 이름 -->
 		<beans:property name="response_type" value="code"></beans:property>
 		<!-- 네이버에서 제공하는 임의의 값 -->
 		<beans:property name="state" value="naver_login_by_sangin"/>
 		<!-- 2) 토큰을 위한 변수 -->
 		<beans:property name="token_request_url" value="https://nid.naver.com/oauth2.0/token"/>
		<!-- 모든 SNS 사업자가 같은 변수명을 쓴다 -->
 		<beans:property name="grant_type" value="authorization_code"/>
 		<!-- 3) 회원정보 요청을 위한 url -->
 		<beans:property name="userinfo_url" value="https://openapi.naver.com/v1/nid/me"/>
 	</beans:bean>
	
	<!-- 이상인 끝 -->

	<!-- 공통관심 사항인 Inquiry_categoryAdivce를 Advice로 등록하자 -->
	<beans:bean id="inquiry_categoryAdvice"
		class="team1.project.bookshop.aop.Inquiry_categoryAdvice" />
	
 	<!-- bookshop 카테고리 가져오기 관점 정의 -->
 	<aop:config>
		<aop:aspect ref="inquiry_categoryAdvice" id="inquiry_categoryAspect">
			<aop:pointcut expression="execution(public * team1.project.bookshop.shop.controller..*(..))" id="inquiry_categoryPointcut"/>
			<aop:around method="getInquiry_categoryList" pointcut-ref="inquiry_categoryPointcut"/>				
		</aop:aspect> 	 	
 	</aop:config>
	
	<!-- Rest 요청에 대한 글로벌 예외를 처리할 빈 등록 json 등의 데이터로 결과를 보여주는 예외 객체 -->
	<beans:bean 
		id="restShopGlobalException" 
		class="team1.project.bookshop.aop.RestShopGlobalException"/>
	
	<!-- 글로벌 예외 jsp로 결과를 보여주는 예외객체 -->
	<beans:bean
		id="shopGlobalException" 
		class="team1.project.bookshop.aop.ShopGlobalException"/>		
	
</beans:beans>
